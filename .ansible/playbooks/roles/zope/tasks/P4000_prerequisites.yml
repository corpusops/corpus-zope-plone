---
- when: [cops_zope_s_prerequisites_pkgs]
  tags: [cops_zope_s_prerequisites_pkgs]
  block:
  # workaround the libjpegturbo transitional
  # package hell by installing it explicitly
  - name: update & install libjpeg-dev (workaround for deb bug)
    package:
      cache_valid_time: '{{60*60}}'
      update_cache: yes
      name: '{{item}}'
      state: present
    when: "(ansible_os_family.lower() in ['debian'])"
    with_items: [libjpeg-dev]
  - name: update & install prerequisites
    package:
      cache_valid_time: '{{60*60}}'
      update_cache: yes
      name: '{{item}}'
      state: present
    when: "(ansible_os_family.lower() in ['debian'] and
            cops_zope_vars.deb_packages is not none and
            cops_zope_vars.deb_packages|length > 0)"
    with_items: "{{cops_zope_vars.deb_packages}}"
  - name: update & install prerequisites
    package:
      update_cache: yes
      enablerepo: epel,epel-testing
      name: '{{item}}'
      state: present
    when: "(ansible_os_family.lower() in ['redhat'] and
            cops_zope_vars.rh_packages is not none and
            cops_zope_vars.rh_packages|length > 0)"
    with_items: "{{cops_zope_vars.rh_packages}}"
  - name: update & install prerequisites (venv)
    package:
      cache_valid_time: '{{60*60}}'
      update_cache: yes
      name: '{{item}}'
      state: present
    when: "(ansible_os_family.lower() in ['debian'] and
            cops_zope_vars.venv_deb_packages is not none and
            cops_zope_vars.venv_deb_packages|length > 0)"
    with_items: "{{cops_zope_vars.venv_deb_packages}}"
  - name: update & install prerequisites (venv)
    package:
      update_cache: yes
      enablerepo: epel,epel-testing
      name: '{{item}}'
      state: present
    when: "(ansible_os_family.lower() in ['redhat'] and
            cops_zope_vars.venv_rh_packages is not none and
            cops_zope_vars.venv_rh_packages|length > 0)"
    with_items: "{{cops_zope_vars.rh_packages}}"

# Download unified installer related to buildout for having egg cache
- when: [cops_zope_s_prerequisites_ui]
  tags: [cops_zope_s_prerequisites_ui]
  become: true
  become_user: "{{cops_zope_vars.user}}"
  block:
  - when: "not cops_zope_vars.get('skip_eggs_cache', False)"
    block:
      - name: "{{cops_zope_vars.name}}-wgetplone"
        shell: |
          set -ex
          cd "{{cops_zope_vars.ui}}"
          plone_ver="$(grep dist.plone.org/release \
            "{{cops_zope_vars.project_root}}/etc/base.cfg" \
            | grep -v ".cfg" \
            | {{cops_zope_vars.link_selector_mode}} -n1 \
            | sed -re "s/.*dist.plone.org\/release\/(([0-9]+\.?){1,3})/\1/g")"
          if test -e "skip_plone_download${plone_ver}" && \
            test -e "{{cops_zope_vars.plone_arc}}${plone_ver}";then
            echo "AlreadyDone" >&2;exit 0
          fi
          plone_major="$(echo "${plone_ver}" \
            | sed -re "s/^([0-9]+\.[0-9]+).*/\1/g")"
          wget -c "{{cops_zope_vars.installer_url}}" \
            -O "{{cops_zope_vars.plone_arc}}${plone_ver}"
          touch "skip_plone_download${plone_ver}"
        register: cops_c_zope_ui_download
        changed_when: "not 'AlreadyDone' in cops_c_zope_ui_download.stderr"
      - name: "{{cops_zope_vars.name}}-unpackplone"
        shell: |
          set -ex
          cd "{{cops_zope_vars.ui}}"
          plone_ver="$(grep dist.plone.org/release \
            "{{cops_zope_vars.project_root}}/etc/base.cfg" \
            | grep -v ".cfg" \
            | {{cops_zope_vars.link_selector_mode}} -n1 \
            | sed -re "s/.*dist.plone.org\/release\/(([0-9]+\.?){1,3})/\1/g")"
          if test -e skip_plone_unpack${plone_ver} && \
            test -e "{{cops_zope_vars.ui}}/Plone-${plone_ver}-UnifiedInstaller/install.sh";then
            echo "AlreadyDone" >&2;exit 0
          fi
          tar xzvf {{cops_zope_vars.plone_arc}}${plone_ver} \
            && touch skip_plone_unpack${plone_ver}
        register: cops_c_zope_ui_unpack
        changed_when: "not 'AlreadyDone' in cops_c_zope_ui_unpack.stderr"
      - name: "{{cops_zope_vars.name}}-unpackcache"
        shell: |
          plone_ver="$(grep dist.plone.org/release \
            "{{cops_zope_vars.project_root}}/etc/base.cfg" \
            | grep -v ".cfg" \
            | {{cops_zope_vars.link_selector_mode}} -n1 \
            | sed -re "s/.*dist.plone.org\/release\/(([0-9]+\.?){1,3})/\1/g")"
          cd "{{cops_zope_vars.buildout_cache}}"
          if test -e {{cops_zope_vars.buildout.settings.buildout['eggs-directory']}}/Products.CMFCore*;then
           echo "AlreadyDone" >&2;exit 0
          fi
          tar xjf "{{cops_zope_vars.ui}}/Plone-${plone_ver}-UnifiedInstaller/packages/buildout-cache.tar.bz2"
        register: cops_c_zope_ui_unpack_cache
        changed_when: "not 'AlreadyDone' in cops_c_zope_ui_unpack_cache.stderr"
