---
version: '3.5'
# Build with (build stock first !):
#  docker build --squash  -t corpusops/zope:dev -f Dockerfile.dev [--build-arg=SKIP_COPS_UPDATE=y]
# Start with:
#  SUPEREDITORS=$(id -u) docker-compose -f d*-compose-dev.yml -f d*-compose-project.yml -f d*-compose-project-dev.yml up -t 0 -d --force-recreate zope
#
x-image: &image_template
  environment:
  - SUPEREDITORS=$SUPEREDITORS
  - "DOCKER_SKIP_START=${DOCKER_SKIP_START-}"
  - |
    A_RECONFIGURE=---
    only_steps: true
    cops_zope_lifecycle_app_push_code: false
    cops_zope_s_docker_reconfigure: true
    cops_zope_s_setup_reverse_proxy: true
    cops_zope_s_setup_configs: true
    corpusops_services_proxy_haproxy_do_prerequisites: false
    corpusops_services_proxy_haproxy_do_services: false
    #
    cops_zope_s_entry_point: true
    cops_zope_cron_periodicity_pack: "#"
    cops_zope_cron_periodicity_backup_inc: "#"
    cops_zope_cron_periodicity_backup_snap: "#"
    cops_zope_cron_periodicity_restart: "#"
  - |
    A_POSTCONFIGURE=---
    only_steps: true
    corpusops_services_proxy_haproxy_do_prerequisites: false
    corpusops_services_proxy_haproxy_do_services: false
    cops_zope_lifecycle_app_push_code: false
    cops_zope_s_manage_content: true
  command: >
    sh -c 'if [ "x$DOCKER_SKIP_START" != x ];
    then while true;do echo sleeping;sleep 65535;done
    else exec /app_entry_point;
    fi'
  # for now this is a bloat image-as-a-vm to make a dev env ligther than a vagrant VM
  volumes: &image_volumes
  # systemd
  - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
  # data
  - "./local/setup:/setup"
  - "./local/data/blobstorage/storage:/srv/projects/zopeproject/data/var/blobstorage/storage"
  - "./local/data/blobstorage/backup:/srv/projects/zopeproject/data/var/blobstorage/backup"
  - "./local/data/filestorage:/srv/projects/zopeproject/data/var/filestorage"
  - "./local/data/backups:/srv/projects/zopeproject/data/var/backups"
  - "./local/data/snapshotbackups:/srv/projects/zopeproject/data/var/snapshotbackups"
  - "./local/data/log:/srv/projects/zopeproject/data/var/log"
  # sources
  - "./src:/srv/projects/zopeproject/project/src"
  - "./setup.py:/srv/projects/zopeproject/project/setup.py"
  - "./setup.cfg:/srv/projects/zopeproject/project/setup.cfg"
  - "./buildout.cfg:/srv/projects/zopeproject/project/buildout.cfg"
  - "./MANIFEST.in:/srv/projects/zopeproject/project/MANIFEST.in"
  - "./buildout-prod.cfg:/srv/projects/zopeproject/project/buildout-prod.cfg"
  - "./.coveragerc:/srv/projects/zopeproject/project/.coveragerc"
  - "./bootstrap-buildout.py:/srv/projects/zopeproject/project/bootstrap-buildout.py"
  - "./products:/srv/projects/zopeproject/project/products"
  - "./etc:/srv/projects/zopeproject/project/etc"
  - "./docs:/srv/projects/zopeproject/project/docs"
  - "./www:/srv/projects/zopeproject/project/www"
  # provision
  - "./.ansible/vaults:/provision_dir/.ansible/vaults"
  - "./.ansible/scripts:/provision_dir/.ansible/scripts"
  - "./.ansible/playbooks:/provision_dir/.ansible/playbooks"
  - "./local/setups.zope:/provision_dir/local/setups.zope"
  # Remember: /setup/rootfs/ is synced inside the container /
  # Need a bind mount in local/corpusops.bootstrap instead of the symlink
  # - "./local/corpusops.bootstrap/bin:/srv/corpusops/corpusops.bootstrap/bin"
  # - "./local/corpusops.bootstrap/hacking:/srv/corpusops/corpusops.bootstrap/hacking"
  # - "./local/corpusops.bootstrap/roles:/srv/corpusops/corpusops.bootstrap/roles"
  # - "./local/corpusops.bootstrap/requirements:/srv/corpusops/corpusops.bootstrap/requirements"
  # - "./local/corpusops.bootstrap/docs:/srv/corpusops/corpusops.bootstrap/docs"
services:
  zope:
    <<:  [ *image_template ]
