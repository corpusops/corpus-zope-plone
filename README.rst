=====================================================================
Exemple of a generic plone portal deployment with salt/makina-states
=====================================================================

.. contents::

Add you own sources
-------------------

- Generate a Plone add-on with mr.bob

- Replace src/test with your generated addon src/ content

- Replace setup.py with the generated version

- Change the `mainegg` value in ./etc/sys/settings.cfg


USE/Install With makina-states
-------------------------------
- Iniatilise on the target platform the project if it is not already done::

    salt mc_project.init_project name=<foo>

- Keep under the hood both remotes (pillar & project).

- Clone the project pillar remote inside your project top directory

- Add/Relace your salt deployment code inside **.salt** inside your repository.

- Add the project remote

    - replace remotenickname with a sensible name (eg: prod)::
    - replace the_project_remote_given_in_init with the real url

    - Run the following commands::

        git remote add <remotenickname>  <the_project_remote_given_in_init>
        git fetch --all

- Each time you need to deploy from your computer, run::

    cd pillar
    git push [--force] <remotenickname> <yourlocalbranch(eg: master,prod,whatever)>:master
    cd ..
    git push [--force] <remotenickname> <yourlocalbranch(eg: master,prod,whatever)>:master

- Notes:

    - The distant branch is always *master**
    - If you force the push, the local working copy of the remote deployed site
      will be resetted to the TIP changeset your are pushing.

- If you want to install locally on the remote computer, or test it locally and
  do not want to run the full deployement procedure, when you are on a shell
  (connected via ssh on the remote computer or locally on your box), run::

      salt mc_project.deploy only=install,fixperms

- You can also run just specific step(s)::

      salt mc_project.deploy only=install,fixperms only_steps=000_whatever
      salt mc_project.deploy only=install,fixperms only_steps=000_whatever,001_else

- If you want to commit in prod and then push back from the remote computer, remember
  to push on the right branch, eg::

    git remote add github https://github.com/orga/repo.git
    git fetch --all
    git push github master:prod

ALT: INSTALLING THIS PROJECT  by hand
-----------------------------------------
::

    cd cgwb
    mkdir workdir
    git clone <url> cgwb
    sudo apt-get install -y build-essential m4 libtool pkg-config autoconf gettext bzip2 groff man-db automake libsigc++-2.0-dev tcl8.5 git libssl-dev libxml2-dev libxslt1-dev libbz2-dev zlib1g-dev python-setuptools python-dev libjpeg62-dev libreadline-dev python-imaging wv poppler-utils libsqlite0-dev libgdbm-dev libdb-dev tcl8.5-dev tcl8.5-dev tcl8.4 tcl8.4-dev tk8.5-dev libsqlite3-dev libcurl4-openssl-dev

Run buildout::

    touch etc/sys/settings-local.cfg # or cp etc/sys/settings.cfg etc/sys/settings-local.cfg
    python bootstrap.py -dc <buildout>
    bin/buildout -Nc <buildout>

OVERRIDE DEFAULT SETTINGS
--------------------------
On the first checkout you need to create ``etc/sys/settings-local.cfg``/
You can either create an empty file or copy ``etc/sys/settings.cfg`` and adapt it to your needs.
Edit the etc/sys/settings-local.cfg file.::

    etc/sys
    |
    |-- settings.cfg       -> various common settings (crons hours, hosts, installation paths, ports, passwords)
    `-- settings-local.cfg -> override locally the common settings (do not commit the file)


PRODUCTION MODE
---------------
To make your application safe for production, run the ``buildout-prod.cfg`` buildout'.
It extends this one with additionnal crontabs and backup scripts and some additionnal instances creation.

BASE BUILDOUTS WHICH DO ONLY SCHEDULE PARTS FROM THERE & THERE
-------------------------------------------------------------------
::

    |-- etc/base.cfg               -> The base buildout
    |-- buildout-prod.cfg          -> buildout for production
    |-- buildout-dev.cfg           -> buildout for development

PROJECT Files
~~~~~~~~~~~~~~~~~~~~~~~~
- Think you have the most important sections of this buildout configuration in etc/cgwb.cfg
Set the project developement  specific settings there
::

    etc/project/
    |-- plone.cfg       -> your project needs (packages, sources, product, version spinngss)
    |-- versions.cfg    -> your project version pinnings (KGS)
    `-- kgs.cfg         -> autogenerated to be manual merged in your project version pinngs.


SYSTEM ADMINISTRATORS RELATED FILES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

    etc/init.d/                 -> various init script (eg supervisor)
    etc/logrotate.d/            -> various logrotate configuration files
    etc/sys/
    |-- ha.cfg           -> Project loadbalancer settings
    |-- supervisor.cfg   -> Project production settings for supervision
    |-- system.cfg       -> Project settings forcron & logrotation

We generate two virtualhosts for a cliassical apache or nginxsetup, mostly ready but feel free to copy/adapt.

CONFIGURATION TEMPLATES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

    etc/templates/
    |-- ha/balancer.conf.template   -> haproxy template.
    |-- logrotate.conf.template     -> logrotate configuration file template for your Zope logs
    `-- supervisor/supervisor.initd -> template for supervisor init script

.. vim:set ft=rst:
